/*
 * Copyright 2015-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    // declare before any other plugin
    id 'com.google.osdetector'
    id 'com.gradle.build-scan'
    id 'com.github.johnrengelman.shadow' apply false
    id "org.jetbrains.kotlin.jvm" apply false
    id 'io.spring.dependency-management' apply false
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

allprojects {
    dependencyLocking {
        lockAllConfigurations()
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        jcenter()
        maven { url 'https://oss.jfrog.org/oss-release-local' }
    }

    dependencyManagement {
        dependencies {
            dependency "javax.inject:javax.inject:${javaxInjectVersion}"
            dependency "javax.annotation:javax.annotation-api:${javaxAnnotationVersion}"
            dependency "io.netty:netty-buffer:${nettyBufferVersion}"
            dependency "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlinStdlibVersion}"
            dependency "com.gojuno.koptional:koptional:${koptionalVersion}"
            dependency "com.google.protobuf:protobuf-java:${protobufVersion}"
            dependency "com.google.protobuf:protoc:${protobufVersion}"
            dependency "io.rsocket.kotlin:rsocket-core:${rsocketKotlinVersion}"
            dependency "io.opentracing:opentracing-api:${opentracingVersion}"
            dependency "org.slf4j:slf4j-api:${slfVersion}"
            dependency "org.slf4j:slf4j-simple:${slfVersion}"

            /*testing*/
            dependency "io.rsocket.kotlin:rsocket-transport-okhttp:${rsocketKotlinVersion}"
            dependency "io.rsocket.kotlin:rsocket-transport-netty:${rsocketKotlinVersion}"
            dependency "org.assertj:assertj-core:${assertjVersion}"
            dependencySet(group: "org.junit.jupiter", version: "${junit5Version}") {
                entry "junit-jupiter-api"
                entry "junit-jupiter-engine"
                entry "junit-jupiter-params"
            }
        }
    }

    /*need to generate kdocs*/
    tasks.withType(Javadoc).all { enabled = false }

    plugins.withType(JavaPlugin) {
        compileJava {
            options.compilerArgs << '-Xlint:all,-overloads,' +
                    '-rawtypes,-unchecked'
        }
    }

    compileJava {
        sourceCompatibility = 1.7
        targetCompatibility = 1.7
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
        baseName = "${project.name}"
        version = "${project.version}"
    }

    artifacts {
        archives sourcesJar, jar
    }
}