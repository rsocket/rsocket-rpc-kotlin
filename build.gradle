/*
 * Copyright 2015-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    // declare before any other plugin
    id 'com.google.osdetector'
    id 'com.palantir.git-version'
    id 'com.gradle.build-scan'
    id 'com.github.johnrengelman.shadow' apply false
    id 'org.jetbrains.kotlin.jvm' apply false
    id 'io.spring.dependency-management' apply false
}

def versionSuffix = versionSuffix()

allprojects {
    dependencyLocking {
        lockAllConfigurations()
    }

    project.version += versionSuffix
    println "version: ${project.version}"
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.jetbrains.kotlin.jvm'

    repositories {
        jcenter()
        maven { url 'https://oss.jfrog.org/oss-release-local' }
    }

    /*need to generate kdocs*/
    tasks.withType(Javadoc).all { enabled = false }

    compileJava {
        options.compilerArgs << '-Xlint:all,-overloads,' +
                '-rawtypes,-unchecked'

        sourceCompatibility = 1.7
        targetCompatibility = 1.7
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "1.6"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.6"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
        baseName = "${project.name}"
        version = "${project.version}"
    }

    artifacts {
        archives sourcesJar, jar
    }
}

apply from: 'gradle/publishing-library.gradle'
apply from: 'gradle/bintray.gradle'
apply from: 'gradle/dependency-management.gradle'

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

def versionSuffix() {
    def versionSuffix
    def branchName = project.findProperty('branch');
    if (branchName == null) {
        def details = versionDetails()
        if (details != null) {
            branchName = details.branchName
        }
    }
    /*branch*/
    if (branchName != null) {
        if (branchName == 'master') {
            versionSuffix = ''
        } else if (branchName == 'develop') {
            versionSuffix = '-SNAPSHOT'
        } else {
            versionSuffix = "-${branchName.replace("/", "-")}-SNAPSHOT"
        }
        /*tag*/
    } else {
        versionSuffix = ''
    }
    return versionSuffix
}