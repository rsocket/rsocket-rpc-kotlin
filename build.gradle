/*
 * Copyright 2015-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    // declare before any other plugin
    id 'com.google.osdetector' version '1.4.0'
    id 'com.gradle.build-scan' version '1.15.1'
    id 'com.github.johnrengelman.shadow' version '2.0.1' apply false
    id "org.jetbrains.kotlin.jvm" version "1.3.11" apply false
    id 'io.spring.dependency-management' version '1.0.6.RELEASE' apply false
}

apply from: 'publication.gradle'
apply from: 'artifactory.gradle'
apply from: 'bintray.gradle'

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'maven-publish'

    ext {
        protobufVersion = '3.6.1'
        kotlinStdlibVersion = '1.3.11'
        nettyBufferVersion = '4.1.32.Final'
        rsocketVersion = '0.9.6'
        koptionalVersion = '1.6.0'
        opentracingVersion = '0.31.0'
        javaxInjectVersion = '1'
        javaxAnnotationVersion = '1.3.2'
        slfVersion ='1.7.25'
        junit5Version = '5.1.0'
        assertjVersion = '3.11.1'
    }

    repositories {
        jcenter()
        maven { url 'https://oss.jfrog.org/oss-release-local' }
    }

    dependencyManagement {
        dependencies {
            dependency "javax.inject:javax.inject:${ext['javaxInjectVersion']}"
            dependency "javax.annotation:javax.annotation-api:${ext['javaxAnnotationVersion']}"
            dependency "io.netty:netty-buffer:${ext['nettyBufferVersion']}"
            dependency "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${ext['kotlinStdlibVersion']}"
            dependency "com.gojuno.koptional:koptional:${ext['koptionalVersion']}"
            dependency "com.google.protobuf:protobuf-java:${ext['protobufVersion']}"
            dependency "io.rsocket.kotlin:rsocket-core:${ext['rsocketVersion']}"
            dependency "io.opentracing:opentracing-api:${ext['opentracingVersion']}"
            dependency "org.slf4j:slf4j-api:${ext['slfVersion']}"
            dependency "org.slf4j:slf4j-simple:${ext['slfVersion']}"

            /*testing*/
            dependency "io.rsocket.kotlin:rsocket-transport-okhttp:${ext['rsocketVersion']}"
            dependency "io.rsocket.kotlin:rsocket-transport-netty:${ext['rsocketVersion']}"
            dependency "org.assertj:assertj-core:${ext['assertjVersion']}"
            dependencySet(group: 'org.junit.jupiter', version: ext['junit5Version']) {
                entry 'junit-jupiter-api'
                entry 'junit-jupiter-engine'
                entry 'junit-jupiter-params'
            }
        }
    }

    /*need to generate kdocs*/
    tasks.withType(Javadoc).all { enabled = false }

    plugins.withType(JavaPlugin) {
        compileJava {
            options.compilerArgs << '-Xlint:all,-overloads,' +
                    '-rawtypes,-unchecked'
        }
    }

    compileJava {
        sourceCompatibility = 1.7
        targetCompatibility = 1.7
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
        baseName = "${project.name}"
        version = "${project.version}"
    }

    artifacts {
        archives sourcesJar
    }
}