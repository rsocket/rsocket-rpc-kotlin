/*
 * Copyright 2015-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'cpp'
    id 'com.google.protobuf'
    id 'com.jfrog.artifactory'
    id 'com.jfrog.bintray'
    id 'maven-publish'
}

description = 'RSocket-kotlin RPC Protobuf Generator'

def pluginPrefix = "rsocket-rpc-protobuf-${osdetector.os}-${osdetector.arch}"
def pluginName = "${pluginPrefix}.exe"
def artifactStagingPath = "$buildDir/artifacts" as File
def pathToPlugin = "${artifactStagingPath.getPath()}/${pluginName}"

// Adds space-delimited arguments from the environment variable env to the
// argList.
def addEnvArgs = { env, argList ->
    def value = System.getenv(env)
    if (value != null) {
        value.split(' +').each() { it -> argList.add(it) }
    }
}

// Adds corresponding "-l" option to the argList if libName is not found in
// LDFLAGS. This is only used for Mac because when building for uploadArchives
// artifacts, we add the ".a" files directly to LDFLAGS and without "-l" in
// order to get statically linked, otherwise we add the libraries through "-l"
// so that they can be searched for in default search paths.
def addLibraryIfNotLinked = { libName, argList ->
    def ldflags = System.env.LDFLAGS
    if (ldflags == null || !ldflags.contains('lib' + libName + '.a')) {
        argList.add('-l' + libName)
    }
}

String arch = rootProject.hasProperty('targetArch') ? rootProject.targetArch :
        osdetector.arch
boolean vcDisable = rootProject.hasProperty('vcDisable') ? rootProject.vcDisable : false

model {
    toolChains {
        // If you have both VC and Gcc installed, VC will be selected, unless you
        // set 'vcDisable=true'
        if (!vcDisable) {
            visualCpp(VisualCpp) {
                // Prefer vcvars-provided environment over registry-discovered environment
                def String vsDir = System.getenv("VSINSTALLDIR")
                def String winDir = System.getenv("WindowsSdkDir")
                if (vsDir != null && winDir != null) {
                    installDir = vsDir
                    windowsSdkDir = winDir
                }
            }
        }
        gcc(Gcc) {
            target("ppcle_64")
        }
        clang(Clang) {}
    }

    platforms {
        x86_32 {
            architecture "x86"
        }
        x86_64 {
            architecture "x86_64"
        }
        ppcle_64 {
            architecture "ppcle_64"
        }
    }

    components {
        kotlin_plugin(NativeExecutableSpec) {
            if (arch in ['x86_32', 'x86_64', 'ppcle_64']) {
                // If arch is not within the defined platforms, we do not specify the
                // targetPlatform so that Gradle will choose what is appropriate.
                targetPlatform arch
            }
            baseName "$pluginPrefix"
        }
    }

    binaries {
        all {
            if (toolChain in Gcc || toolChain in Clang) {
                cppCompiler.define("RSOCKET_RPC_VERSION", version)
                cppCompiler.args "--std=c++0x"
                addEnvArgs("CXXFLAGS", cppCompiler.args)
                addEnvArgs("CPPFLAGS", cppCompiler.args)
                if (osdetector.os == "osx") {
                    cppCompiler.args "-mmacosx-version-min=10.7", "-stdlib=libc++"
                    addLibraryIfNotLinked('protoc', linker.args)
                    addLibraryIfNotLinked('protobuf', linker.args)
                }
                else if (osdetector.os == "windows") {
                    linker.args "-static", "-lprotoc", "-lprotobuf", "-static-libgcc",
                            "-static-libstdc++",
                            "-s"
                }
                else {
                    // Link protoc, protobuf, libgcc and libstdc++ statically.
                    // Link other (system) libraries dynamically.
                    // Clang under OSX doesn't support these options.
                    linker.args "-Wl,-Bstatic", "-lprotoc", "-lprotobuf", "-static-libgcc",
                            "-static-libstdc++",
                            "-Wl,-Bdynamic", "-lpthread", "-s"
                }
                addEnvArgs("LDFLAGS", linker.args)
            }
            else if (toolChain in VisualCpp) {
                cppCompiler.define("RSOCKET_RPC_VERSION", version)
                cppCompiler.args "/EHsc", "/MT"
                if (rootProject.hasProperty('vcProtobufInclude')) {
                    cppCompiler.args "/I${rootProject.vcProtobufInclude}"
                }
                else {
                    println 'You may need to add a propertry, vcProtobufInclude, pointing to protobuf include'
                }

                if (rootProject.hasProperty('vcProtobufLibs')) {
                    linker.args "/LIBPATH:${rootProject.vcProtobufLibs}"
                }
                else {
                    println 'You may need to add a propertry, vcProtobufLibs, pointing to protobuf lib'
                }

                linker.args "libprotobuf.lib", "libprotoc.lib"
            }
        }
    }
}

task buildArtifacts(type: Copy) {
    println 'generating artifacts'
    dependsOn 'kotlin_pluginExecutable'
    from("$buildDir/exe/kotlin_plugin") {
        if (osdetector.os != 'windows') {
            rename pluginPrefix, '$0.exe'
        }
    }
    into artifactStagingPath
}

compileJava.dependsOn ':rsocket-rpc-protobuf:buildArtifacts'

artifacts {
    archives("$pathToPlugin" as File) {
        classifier osdetector.os + "-" + osdetector.arch
        type "exe"
        extension "exe"
        builtBy buildArtifacts
    }
}

apply from: '../gradle/publishing-compiler.gradle'